<?php

namespace App\Controller;

use App\Entity\Property;
use App\Form\CreatePropertyFormType;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use phpDocumentor\Reflection\Types\Void_;

class PropertyController extends AbstractController
{
    /**
     * @Route("/property", name="property")
     */
    public function index()
    {
        return $this->render('property/index.html.twig', [
            'controller_name' => 'PropertyController',
        ]);
    }
    /**
     * @Route("/property/create", name="create_property")
     */
    public function createProperty(Request $request): Response
    {
        $property = new Property();
        $form = $this->createForm(CreatePropertyFormType::class, $property);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $files = $property->getPictures();
            $newNames = [];

            foreach ($files as $key => $file) {
                $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
                
                // Move the file to the directory where brochures are stored
                try {
                    $file->move(
                        $this->getParameter('property_pictures_directory'),
                        $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }

                array_push($newNames, $fileName);
            }

            $property->setPictures($newNames);

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($property);
            $entityManager->flush();

            return $this->redirectToRoute('property');
        }

        return $this->render('property/create.html.twig', [
            'createPropertyForm' => $form->createView(),
        ]);
    }

    /**
     * Generate a unique file name
     * @return string
     */
     private function generateUniqueFileName() :string
     {
         // md5() reduces the similarity of the file names generated by
         // uniqid(), which is based on timestamps
         return md5(uniqid());
     }
}
